{
  "_args": [
    [
      "ason",
      "/Users/aacister/Documents/MeanApps/laBibliotecaAPI/laBibliotecaAPI"
    ]
  ],
  "_from": "ason@latest",
  "_id": "ason@0.1.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/ason",
  "_npmUser": {
    "email": "cs@euforic.co",
    "name": "euforic"
  },
  "_npmVersion": "1.2.12",
  "_phantomChildren": {},
  "_requested": {
    "name": "ason",
    "raw": "ason",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ason/-/ason-0.1.0.tgz",
  "_shasum": "c0d2a1b026a4ce8d60080e85b43257b755daf29e",
  "_shrinkwrap": null,
  "_spec": "ason",
  "_where": "/Users/aacister/Documents/MeanApps/laBibliotecaAPI/laBibliotecaAPI",
  "author": {
    "email": "cs@euforic.co",
    "name": "Christian Sullivan"
  },
  "dependencies": {
    "glob": "*"
  },
  "description": "Advanced JSON - pluggable JSON logic inspired by GYP",
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "c0d2a1b026a4ce8d60080e85b43257b755daf29e",
    "tarball": "https://registry.npmjs.org/ason/-/ason-0.1.0.tgz"
  },
  "engines": {
    "node": "*"
  },
  "keywords": [
    "json",
    "config"
  ],
  "main": "index",
  "maintainers": [
    {
      "email": "cs@euforic.co",
      "name": "euforic"
    }
  ],
  "name": "ason",
  "optionalDependencies": {},
  "readme": "\n# ason\n\n  Advanced JSON inspired by GYP\n\n## Installation\n\n```\n$ npm install ason\n```\n\n## Parser\n\n  Currently only the parser portion is implemented, useful for configuration files.\n  For example a typical configuration file might look something like the following:\n\n```js\n{\n  \"views\": \"/www/example.com/views\",\n  \"view engine\": \"jade\",\n  \"poll interval\": 5000,\n  \"canvas size\": { \"width\": 800, \"height\": 600 }\n}\n```\n\n With Advanced JSON you can define plugin functions, or use ones\n bundled with ason to transform the input, allowing for more\n declarative configurations as shown here:\n\n```js\n{\n  \"views\": \"{root}/views\",\n  \"view engine\": \"jade\",\n  \"poll interval\": \"5 seconds\",\n  \"canvas size\": \"800x600\"\n}\n```\n\n### Writing plugins\n\n Writing a plugin is simple, it's a function which takes the signature `(key, val, parser)`. Let's write one that transforms every value to \"foo\":\n\n```js\nfunction foo(key, val, parser) {\n  return 'foo';\n}\n```\n\n Then use the plugin like so:\n\n```js\nvar ason = require('ason');\n\nvar conf = ason()\n  .use(foo)\n  .read('path/to/config.json');\n```\n\n Now suppose `path/to/config.json` contained `{ \"foo\": \"bar\", \"bar\": \"baz\" }`,\n the `foo()` plugin would yield `{ \"foo\": \"foo\", \"bar\": \"foo\" }`. So you get the picture,\n with this we can accept arbitrary strings such as \"5 seconds\" and transform\n it to the more useful `5000` milliseconds representation.\n\n Many plugins may of course be used, and _all_ will be executed regardless, so if necessary\n subsequent plugins may still make modifications. Depending on what the plugins the order used _may_ have an effect on the JSON.\n\n```js\nason()\n  .use(ason.ms)\n  .use(ason.include)\n  .use(ason.dimensions)\n  .use(ason.replace('{root}', '/www/example.com'))\n  .parse('{ \"interval\": \"15 minutes\" }');\n```\n### ason.ms\n\n  The milliseconds plugin supports strings like \"5s\", \"5 seconds\", \"3 days\", etc:\n\n```js\nason()\n  .use(ason.ms)\n  .parse('{ \"interval\": \"15 minutes\" }');\n```\n\nyields:\n\n```js\n{ interval: 900000 }\n```\n\n### ason.include\n\n  The include plugin allows you to literally include other JSON files. This works in\n  both arrays and object literals, and loads relative to the callee's file. For example:\n\n```js\nason()\n  .use(ason.include)\n  .parse('{ \"prod\": \"include config/production\" }');\n```\n\nyields:\n\n```js\n{ prod: { whatever: 'is', within: 'config/production.json' }}\n```\n\n You can also include multiple files via a glob. This has a special syntax and works in one of three ways.\n\nConsider a config folder containing the following two files:\n\n*database.json:*\n```json\n{\"db\", \"redis\"}\n```\n*app.json:*\n```json\n{\"listen\", 3000}\n```\n\n##### Merging multiple files into one:\n\n```js\n\nason()\n  .use(ason.include)\n  .parse('{ \"prod\": \"include config/*\" }');\n```\nyields:\n\n```js\n{\n\tprod: {\n\t\tdb: \"redis\",\n\t\tlisten: 3000\n\t}\n}\n```\n\n##### Collect files into a map, keyed by filename:\n\n```js\n\n// use curly brackets to collect as a map\nason()\n  .use(ason.include)\n  .parse('{ \"prod\": \"include { config/* }\" }');\n\n```\n\nyields:\n\n\n```js\n{\n\tprod: {\n\t\tdatabase: {\n\t\t\tdb: \"redis\"\n\t\t},\n\t\tapp: {\n\t\t\tlisten: 3000\n\t\t}\n\t}\n}\n\n```\n\n##### Collect files as an array:\n\n\n```js\n\n// use square brackets to collect as an array\nason()\n  .use(ason.include)\n  .parse('{ \"prod\": \"include [ config/* ]\" }');\n\n```\n\nyields:\n\n```js\n{\n\tprod: [\n\t\t{db: \"redis\"},\n\t\t{listen: 3000}\n\t]\n}\n```\n\n\n### ason.bools\n\n  Convert \"yes\", \"no\", \"on\", \"off\", \"enabled\", \"disabled\" into booleans.\n\n### ason.env([prefix])\n\n  Allow environment variables to define config values. If you have the following:\n\n```js\n{\n  \"upload path\": \"/data/uploads\"\n}\n```\n\n  You could then export `UPLOAD_PATH=/tmp` to change this value. Optionally when\n  a `prefix` is given such as \"MYAPP_\" then you must prefix such as `MYAPP_UPLOAD_PATH=/tmp`.\n\n### ason.replace(str, val)\n\n  The replace plugin allows you to replace arbitrary substrings, useful\n  for constants such as the application's root directory etc.\n\n```js\nason()\n  .use(ason.replace('{root}', '/www/example.com'))\n  .parse('{ \"upload path\": \"{root}/tmp\" }');\n```\n\nyields:\n\n```js\n{ \"upload path\": \"/www/example.com/tmp\" }\n```\n\n### ason.args([args])\n\n  Parse from the given `args` or __ARGV__. For example if you have a setting\n  named \"dev ui\" with a default value of `false`, `--dev-ui` would enable it,\n  or `--dev-ui yes` would provide the value \"yes\" which is of course also truthy.\n\n  To compliment `--NAME` you may also negate this, if \"dev ui\" is enabled by default\n  then you may use `--no-dev-ui` to disable it.\n\n### ason.glob\n\n  The glob plugin allows you to specify glob strings, prefixed by \"glob\":\n\n```js\nason()\n  .use(ason.glob)\n  .parse('{ \"js\": \"glob public/{js,vendor}/*.js\" }');\n```\n\nyields:\n\n```js\n{ js: [\"public/js/app.js\", \"public/js/user.js\", \"public/vendor/jquery.js\"] }\n```\n\n## Running tests\n\n```\n$ npm install\n$ make test\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Christian Sullivan &lt;cs@euforic.co&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "Readme.md",
  "version": "0.1.0"
}
